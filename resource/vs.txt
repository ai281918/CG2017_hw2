#version 330
layout(location=0) in vec3 position;
layout(location=1) in vec2 texcoord;
layout(location=2) in vec3 normal;

// uniform variable can be viewed as a constant
// you can set the uniform variable by glUniformXXXXXXXX
uniform mat4 model;
uniform mat4 view;
uniform mat4 proj;
uniform vec2 opt;
uniform vec3 lightPos;
uniform vec3 lightColor;

// 'out' means vertex shader output for fragment shader
out vec3 camNormal;
out vec2 vUV;
out vec3 camPos;
out vec3 camLightPos;
flat out vec3 fs_ambient;
flat out vec3 flat_diffuse;
flat out vec3 flat_specular;
out vec3 g_diffuse;
out vec3 g_specular;

void main()
{
	vUV = texcoord;
	gl_Position=proj*view*model*vec4(position, 1.0);
	camPos = vec3(view*model * vec4(position, 1.0f));
	camLightPos = vec3(view*vec4(lightPos, 1.0));
	camNormal = normalize(vec3(view * model * vec4(normal, 0.0)));
	
	//ambient
	float ambientStrength = 0.2f;
    fs_ambient = ambientStrength * lightColor;
	
	if(opt.x == 0){
		// Diffuse 
		vec3 lightDir = normalize(camLightPos - camPos);
		float diff = max(dot(camNormal, lightDir), 0.0);
		flat_diffuse = diff * lightColor;

		float dis = pow(length(camLightPos - camPos), 2)*0.01;

		if(opt.y == 0){
			// Specular
			float specularStrength = 3f;
			vec3 viewDir = normalize(camPos - vec3(0, 0, 0));
			vec3 reflectDir = reflect(lightDir, camNormal);  
			float spec = pow(max(dot(viewDir, reflectDir), 0.0), 8) / dis;
			flat_specular = specularStrength * spec * lightColor;
		}
		else if(opt.y == 1){
			// Specular
			float specularStrength = 3f;
			vec3 viewDir = normalize(camPos - vec3(0, 0, 0));
			vec3 halfwayDir = normalize(lightDir + -viewDir);  
			float spec = pow(max(dot(camNormal, halfwayDir), 0.0), 8.0) / dis;
			flat_specular = specularStrength * spec * lightColor;
		}
	}
	else if(opt.x == 1){
		float dis = pow(length(camLightPos - camPos), 2)*0.01;

		// Diffuse 
		vec3 lightDir = normalize(camLightPos - camPos);
		float diff = max(dot(camNormal, lightDir), 0.0);
		g_diffuse = diff * lightColor;
		
		if(opt.y == 0){
			// Specular
			float specularStrength = 3f;
			vec3 viewDir = normalize(camPos - vec3(0, 0, 0));
			vec3 reflectDir = reflect(lightDir, camNormal);  
			float spec = pow(max(dot(viewDir, reflectDir), 0.0), 8) / dis;
			g_specular = specularStrength * spec * lightColor;
		}
		else if(opt.y == 1){
			// Specular
			float specularStrength = 3f;
			vec3 viewDir = normalize(camPos - vec3(0, 0, 0));
			vec3 halfwayDir = normalize(lightDir + -viewDir);  
			float spec = pow(max(dot(camNormal, halfwayDir), 0.0), 8.0) / dis;
			g_specular = specularStrength * spec * lightColor;
		}
	}
}