#version 330

// Default color buffer location is 0
// If you create framebuffer your own, you need to take care of it
layout(location=0) out vec4 color;

uniform sampler2D text;
uniform vec2 opt;
uniform vec3 lightColor;

in vec3 camNormal;
in vec2 vUV;

in vec3 camPos;
in vec3 camLightPos;
flat in vec3 fs_ambient;
flat in vec3 flat_diffuse;
flat in vec3 flat_specular;
in vec3 g_diffuse;
in vec3 g_specular;

void main()
{
	vec3 objectColor = texture(text, vUV).rgb;

	vec3 diffuse;
	vec3 specular;
	vec3 ambient;
	ambient = fs_ambient;

	if(opt.x == 0){
		if(opt.y == 0 || opt.y == 1){
			diffuse = flat_diffuse;
			specular = flat_specular;
		}
		else{
			ambient = vec3(0.0, 0.0, 0.0);
			diffuse = flat_diffuse;
			specular = vec3(0.0, 0.0, 0.0);
		}
	}
	else if(opt.x == 1){
		if(opt.y == 0 || opt.y == 1){
			diffuse = g_diffuse;
			specular = g_specular;
		}
		else{
			ambient = vec3(0.0, 0.0, 0.0);
			diffuse = g_diffuse;
			specular = vec3(0.0, 0.0, 0.0);
		}
	}
	else if(opt.x == 2){
		float dis = pow(length(camLightPos - camPos), 2)*0.01;
		// Diffuse
		vec3 lightDir = normalize(camLightPos - camPos);
		float diff = max(dot(camNormal, lightDir), 0.0) / dis;
		diffuse = diff * lightColor;

		if(opt.y == 0){
			// Specular
			float specularStrength = 3f;
			vec3 viewDir = normalize(camPos - vec3(0, 0, 0));
			vec3 reflectDir = reflect(lightDir, camNormal);  
			float spec = pow(max(dot(viewDir, reflectDir), 0.0), 8);
			specular = specularStrength * spec * lightColor;
		}
		else if(opt.y == 1){
			// Specular
			float specularStrength = 3f;
			vec3 viewDir = normalize(camPos - vec3(0, 0, 0));
			vec3 halfwayDir = normalize(lightDir + -viewDir);  
			float spec = pow(max(dot(camNormal, halfwayDir), 0.0), 8.0);
			specular = specularStrength * spec * lightColor;
		}
		else{
			ambient = vec3(0.0, 0.0, 0.0);
			specular = vec3(0.0, 0.0, 0.0);
		}	
	}

    vec3 result = (ambient + diffuse + specular) * objectColor;
    color = vec4(result, 1.0f);
	// color=texture(text, vUV);
	// color = vec4(1, 1, 1, 1);
}